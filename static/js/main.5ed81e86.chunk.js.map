{"version":3,"sources":["App/Clock/styled.js","App/Clock/index.js","App/Clock/useCurrentData.js","App/Form/styled.js","App/Result/styled.js","App/Result/index.js","App/Form/index.js","App/Form/useRatesData.js","App/App.js","reportWebVitals.js","index.js"],"names":["Div","styled","div","formatDate","date","toLocaleString","undefined","weekday","hour","minute","second","day","month","Clock","useState","Date","setDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","Wrapper","Title","h1","Fieldset","fieldset","Legend","legend","Loading","p","Failure","Span","span","Input","input","required","css","Info","Button","button","StyledResult","Result","result","sourceAmount","toFixed","targetAmount","currency","Form","setResult","ratesData","state","setRatesData","setTimeout","a","fetch","response","ok","Error","statusText","json","rates","useRatesData","setCurrency","amount","setAmount","onSubmit","event","preventDefault","rate","calculateResult","type","value","onChange","target","placeholder","min","step","as","Object","keys","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAEaA,EAAMC,IAAOC,IAAV,6H,OCCVC,EAAa,SAACC,GAAD,OAAUA,EAAKC,oBAAeC,EAAW,CACxDC,QAAS,OACTC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,IAAK,UACLC,MAAO,UAGEC,EAAQ,WACjB,IAAMT,ECXoB,WAC1B,MAAwBU,mBAAS,IAAIC,MAArC,mBAAOX,EAAP,KAAaY,EAAb,KAYA,OAVAC,qBAAU,WACN,IAAMC,EAAaC,aAAY,WAC3BH,EAAQ,IAAID,QACb,KAEH,OAAO,WACHK,cAAcF,MAEnB,IAEId,EDFMiB,GAEb,OACI,eAACrB,EAAD,0BAEK,IACAG,EAAWC,OEjBXkB,EAAUrB,IAAOC,IAAV,iIAMPqB,EAAQtB,IAAOuB,GAAV,6DAILC,EAAWxB,IAAOyB,SAAV,qDAIRC,EAAS1B,IAAO2B,OAAV,4HAONC,EAAU5B,IAAO6B,EAAV,kEAKPC,EAAU9B,IAAO6B,EAAV,qEAKPE,EAAO/B,IAAOgC,KAAV,2EAKJC,EAAQjC,IAAOkC,MAAV,wJAMZ,qBAAGC,UAA2BC,YAAJ,8HAMnBC,EAAOrC,IAAO6B,EAAV,oHAOJS,EAAStC,IAAOuC,OAAV,uO,wBCvDNC,EAAexC,IAAO6B,EAAV,wHCAZY,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAClB,cAACF,EAAD,YACOE,GACC,qCACKA,EAAOC,aAAaC,QAAQ,GADjC,oBAC4D,IACxD,mCACKF,EAAOG,aAAaD,QAAQ,GADjC,OAC2CF,EAAOI,kBCHrDC,EAAO,WAChB,MAA4BlC,qBAA5B,mBAAO6B,EAAP,KAAeM,EAAf,KACMC,ECLkB,WACxB,MAAkCpC,mBAAS,CACvCqC,MAAO,YADX,mBAAOD,EAAP,KAAkBE,EAAlB,KAgCA,OA3BAnC,qBAAU,WAwBNoC,WAvBgB,uCAAG,kCAAAC,EAAA,+EAEYC,MAAM,iDAFlB,WAELC,EAFK,QAIGC,GAJH,sBAKD,IAAIC,MAAMF,EAASG,YALlB,uBAQmBH,EAASI,OAR5B,gBAQHC,EARG,EAQHA,MAAOzD,EARJ,EAQIA,KAEfgD,EAAa,CACTD,MAAO,UACPU,QACAzD,SAbO,kDAiBXgD,EAAa,CACTD,MAAO,UAlBA,0DAAH,qDAuBO,OACxB,IAEID,ED5BWY,GAYlB,EAAgChD,mBAAS,OAAzC,mBAAOiC,EAAP,KAAiBgB,EAAjB,KACA,EAA4BjD,mBAAS,IAArC,mBAAOkD,EAAP,KAAeC,EAAf,KAOA,OAEI,cAAC3C,EAAD,UACA,uBAAM4C,SARO,SAACC,GACdA,EAAMC,iBAdc,SAACrB,EAAUiB,GAC/B,IAAMK,EAAOnB,EAAUW,MAAMd,GAE7BE,EAAU,CACNL,cAAeoB,EACflB,aAAckB,EAASK,EACvBtB,aASJuB,CAAgBvB,EAAUiB,IAM1B,UACI,cAACzC,EAAD,8BAGA,eAACE,EAAD,WACI,cAACE,EAAD,4CACqB,YAApBuB,EAAUC,MAEH,eAACtB,EAAD,iCACkB,uBADlB,qEAKoB,UAApBqB,EAAUC,MAEN,cAACpB,EAAD,+GAIA,qCACI,4BACI,kCACI,cAACC,EAAD,4BAEA,cAACE,EAAD,CACIqC,KAAK,SACLC,MAAOR,EACPS,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBT,EAAUS,EAAOF,QAC3CG,YAAY,6BACZC,IAAI,OACJC,KAAK,MACLzC,UAAQ,SAIpB,4BACI,kCACI,cAACJ,EAAD,uBACA,cAACE,EAAD,CACI4C,GAAG,SACHN,MAAOzB,EACP0B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBX,EAAYW,EAAOF,QAHjD,SAKKO,OAAOC,KAAK9B,EAAUW,OAAOoB,KAAK,SAAClC,GAAD,OAC/B,wBAEIyB,MAAOzB,EAFX,SAIKA,GAHIA,aASzB,4BACI,cAACR,EAAD,yBAEJ,eAACD,EAAD,8EAC+D,uBAD/D,0BAEsB,4BAAIY,EAAU9C,UAEpC,cAAC,EAAD,CAAQuC,OAAQA,gBE5EjCuC,MAXf,WAEI,OACI,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCEGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ed81e86.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Div = styled.div`\r\n    text-align: right;\r\n    font-family: monospace;\r\n    color: #640057;\r\n    margin-top: 15px;\r\n`;","import { useCurrentDate } from \"./useCurrentData\";\r\nimport { Div } from \"./styled\";\r\n\r\nconst formatDate = (date) => date.toLocaleString(undefined, {\r\n    weekday: \"long\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    day: \"numeric\",\r\n    month: \"long\"\r\n});\r\n\r\nexport const Clock = () => {\r\n    const date = useCurrentDate();\r\n\r\n    return (\r\n        <Div>\r\n            Dzisiaj jest\r\n            {\" \"}\r\n            {formatDate(date)}\r\n        </Div>\r\n    );\r\n};\r\n\r\nexport default Clock;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useCurrentDate = () => {\r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, []);\r\n\r\n    return date;\r\n};","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    background-color: white;\r\n    padding: 20px 40px 40px 40px;\r\n    margin: 0px -20px -20px -20px;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    color: hsl(308, 100%, 32%);\r\n`;\r\n\r\nexport const Fieldset = styled.fieldset`\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport const Legend = styled.legend`\r\n    border-radius: 5px;\r\n    background-color: #640057;\r\n    color: white;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Loading = styled.p`\r\n    color: teal;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Failure = styled.p`\r\n    color: crimson;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    display: inline-block;\r\n    width: 200px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    border: 2px solid #ccc;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    max-width: 300px;\r\n    padding: 10px;\r\n    ${({ required }) => required && css`\r\n        background-color: hsl(308, 100%, 94%);\r\n        border-color: rgb(136, 136, 136);\r\n    `}\r\n`;\r\n\r\nexport const Info = styled.p`\r\n    font-size: 15px;\r\n    text-align: center;\r\n    padding: 15px;\r\n    color: #000000;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 100%;\r\n    border: none;\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    color: white;\r\n    background-color: #640057;\r\n    &:hover {\r\n        background-color: hsl(308, 100%, 32%);\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledResult = styled.p`\r\n    font-size: 20px;\r\n    padding: 15px;\r\n    display: flex;\r\n    justify-content: center;\r\n`;","import { StyledResult } from './styled';\r\n\r\nexport const Result = ({ result }) => (\r\n    <StyledResult>\r\n        {!!result && (\r\n            <>\r\n                {result.sourceAmount.toFixed(2)}&nbsp;PLN&nbsp;=&nbsp; {\" \"}\r\n                <strong>\r\n                    {result.targetAmount.toFixed(2)}&nbsp;{result.currency}\r\n                </strong>\r\n            </>\r\n        )}\r\n    </StyledResult>\r\n);","import { useState } from 'react';\r\nimport { Wrapper, Fieldset, Title, Legend, Loading, Failure, Span, Input, Info, Button } from \"./styled\";\r\nimport { useRatesData } from \"./useRatesData\";\r\nimport { Result } from \"../Result\";\r\n\r\nexport const Form = () => {\r\n    const [result, setResult] = useState();\r\n    const ratesData = useRatesData();\r\n\r\n    const calculateResult = (currency, amount) => {\r\n        const rate = ratesData.rates[currency];\r\n\r\n        setResult({\r\n            sourceAmount: +amount,\r\n            targetAmount: amount * rate,\r\n            currency,\r\n        });\r\n    }\r\n\r\n    const [currency, setCurrency] = useState(\"EUR\");\r\n    const [amount, setAmount] = useState(\"\");\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        calculateResult(currency, amount);\r\n    };\r\n\r\n    return (\r\n\r\n        <Wrapper>\r\n        <form onSubmit={onSubmit}>\r\n            <Title>\r\n                Konwerter walut\r\n            </Title>\r\n            <Fieldset>\r\n                <Legend>Przelicz z PLN na inne waluty</Legend>\r\n                {ratesData.state === \"loading\"\r\n                    ? (\r\n                        <Loading>\r\n                            Chwileczkę... <br />Ładuję kursy walut z Europejskiego Banku Centralnego.\r\n                        </Loading>\r\n                    )\r\n                    : (\r\n                        ratesData.state === \"error\" ? (\r\n\r\n                            <Failure>\r\n                                Ojojoj... Coś poszło nie tak. Sprawdź czy masz połączenie z internetem.\r\n                            </Failure>\r\n                        ) : (\r\n                            <>\r\n                                <p>\r\n                                    <label>\r\n                                        <Span>Kwota w PLN* </Span>\r\n\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            value={amount}\r\n                                            onChange={({ target }) => setAmount(target.value)}\r\n                                            placeholder=\"Wpisz kwotę w zł\"\r\n                                            min=\"0.01\"\r\n                                            step=\"any\"\r\n                                            required\r\n                                        />\r\n                                    </label>\r\n                                </p>\r\n                                <p>\r\n                                    <label>\r\n                                        <Span>Waluta: </Span>\r\n                                        <Input\r\n                                            as=\"select\"\r\n                                            value={currency}\r\n                                            onChange={({ target }) => setCurrency(target.value)}\r\n                                        >\r\n                                            {Object.keys(ratesData.rates).map(((currency) => (\r\n                                                <option\r\n                                                    key={currency}\r\n                                                    value={currency}\r\n                                                >\r\n                                                    {currency}\r\n                                                </option>\r\n                                            )))}\r\n                                        </Input>\r\n                                    </label>\r\n                                </p>\r\n                                <p>\r\n                                    <Button>Przelicz</Button>\r\n                                </p>\r\n                                <Info>\r\n                                    Kursy walut pobierane są z Europejskiego Banku Centralnego.<br />\r\n                                    Aktualne na dzień <b>{ratesData.date}</b>\r\n                                </Info>\r\n                                <Result result={result} />\r\n                            </>\r\n                        )\r\n                    )}\r\n            </Fieldset>\r\n        </form>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Form;","import { useEffect, useState } from \"react\";\r\n\r\nexport const useRatesData = () => {\r\n    const [ratesData, setRatesData] = useState({\r\n        state: \"loading\",\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchRates = async () => {\r\n            try {\r\n                const response = await fetch(\"https://api.exchangerate.host/latest?base=PLN\");\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const { rates, date } = await response.json();\r\n\r\n                setRatesData({\r\n                    state: \"success\",\r\n                    rates,\r\n                    date,\r\n                });\r\n\r\n            } catch {\r\n                setRatesData({\r\n                    state: \"error\",\r\n                });\r\n            }\r\n        };\r\n\r\n        setTimeout(fetchRates, 2000);\r\n    }, []);\r\n\r\n    return ratesData;\r\n\r\n};","import { Clock } from \"./Clock\";\r\nimport { Form } from \"./Form\";\r\nimport { Result } from \"./Result\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <>\r\n            <Clock />\r\n            <Form />\r\n            <Result />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}